import React from 'react';

var Colors = {
    default_color: '#8D38C9',
    alphabets: ['#357EC7', // A
    '#C11B17', // B
    '#008080', // C
    '#728C00', // D
    '#0020C2', // E
    '#347C17', // F
    '#D4A017', // G
    '#7D0552', // H
    '#9F000F', // I
    '#E42217', // J
    '#F52887', // K
    '#571B7E', // L
    '#1F45FC', // M
    '#C35817', // N
    '#F87217', // O
    '#41A317', // P
    '#4C4646', // Q
    '#4CC417', // R
    '#C12869', // S
    '#15317E', // T
    '#AF7817', // U
    '#F75D59', // V
    '#FF0000', // W
    '#000000', // X
    '#E9AB17', // Y
    '#8D38C9' // Z
    ],
    numbers: ['#FF0000', // 0
    '#8D38C9', // 1
    '#000000', // 2
    '#008080', // 3
    '#0020C2', // 4
    '#41A317', // 5
    '#7D0552', // 6
    '#C35817', // 7
    '#F75D59', // 8
    '#571B7E' // 9
    ]
};

var Utils = {
    getColor: function getColor(letter) {
        if (letter) {
            var charCode = letter.charCodeAt(0);
            var isNumber = charCode >= 48 && charCode <= 57;
            var isAlphabet = charCode >= 65 && charCode <= 90;
            if (isNumber || isAlphabet) {
                var charIndex = letter.charCodeAt(0) - (isAlphabet ? 65 : 48);
                var colorIndex = charIndex % (isAlphabet ? Colors.alphabets.length : Colors.numbers.length);
                return isAlphabet ? Colors.alphabets[colorIndex] : Colors.numbers[colorIndex];
            }
        }
        return Colors.default_color;
    },
    getNameInitials: function getNameInitials() {
        var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        var twoLetters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        var splittedName = name.toString().toUpperCase().split(' ');
        return twoLetters ? splittedName.length > 1 ? splittedName[0].charAt(0) + splittedName[1].charAt(0) : splittedName[0].charAt(0) : splittedName[0].charAt(0);
    }

};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var LetteredAvatar = function LetteredAvatar(props) {
    return React.createElement(
        React.Fragment,
        null,
        getAvatarHTML(props)
    );
};

var getAvatarHTML = function getAvatarHTML(props) {
    var _props$options = props.options,
        options = _props$options === undefined ? {} : _props$options;

    if (options.href) {
        return React.createElement(
            'a',
            { href: options.href, target: options.target ? options.target : '_self' },
            ' ',
            getImage(props)
        );
    }
    return getImage(props);
};

var getImage = function getImage(props) {
    var _props$name = props.name,
        name = _props$name === undefined ? '' : _props$name,
        _props$imgSrc = props.imgSrc,
        imgSrc = _props$imgSrc === undefined ? '' : _props$imgSrc,
        _props$options2 = props.options,
        options = _props$options2 === undefined ? {} : _props$options2;
    var _options$imgClass = options.imgClass,
        imgClass = _options$imgClass === undefined ? null : _options$imgClass,
        _options$shape = options.shape,
        shape = _options$shape === undefined ? 'round' : _options$shape,
        _options$size = options.size,
        size = _options$size === undefined ? 60 : _options$size,
        _options$tooltip = options.tooltip,
        tooltip = _options$tooltip === undefined ? true : _options$tooltip,
        _options$tooltipTitle = options.tooltipTitle,
        tooltipTitle = _options$tooltipTitle === undefined ? name : _options$tooltipTitle,
        _options$imgWidth = options.imgWidth,
        imgWidth = _options$imgWidth === undefined ? size : _options$imgWidth,
        _options$imgHeight = options.imgHeight,
        imgHeight = _options$imgHeight === undefined ? size : _options$imgHeight;

    return React.createElement('img', _extends({}, imgSrc ? { src: imgSrc } : { src: createAvatar(props) }, imgClass ? { className: imgClass } : '', shape === 'round' ? { style: { borderRadius: '50%' } } : '', tooltip ? tooltipTitle ? { title: tooltipTitle } : { title: name } : '', imgSrc && imgWidth && imgHeight ? { width: imgWidth, height: imgHeight } : '', {
        alt: name
    }));
};

var createAvatar = function createAvatar(props) {
    var name = props.name,
        _props$options3 = props.options,
        options = _props$options3 === undefined ? {} : _props$options3;
    var _options$size2 = options.size,
        size = _options$size2 === undefined ? 60 : _options$size2,
        _options$twoLetter = options.twoLetter,
        twoLetter = _options$twoLetter === undefined ? false : _options$twoLetter,
        _options$bgColor = options.bgColor,
        bgColor = _options$bgColor === undefined ? null : _options$bgColor,
        _options$letterColor = options.letterColor,
        letterColor = _options$letterColor === undefined ? null : _options$letterColor;


    var initials = Utils.getNameInitials(name, twoLetter);
    var canvas = document.createElement('canvas');
    canvas.width = size;
    canvas.height = size;
    var context = canvas.getContext('2d');
    context.fillStyle = bgColor || Utils.getColor(initials);
    context.fillRect(0, 0, canvas.width, canvas.height);
    context.font = Math.round(canvas.width / 2) + 'px Arial';
    context.textAlign = 'center';
    context.fillStyle = letterColor || '#FFF';
    context.fillText(initials, size / 2, size / 1.5);

    var dataURI = canvas.toDataURL();
    canvas = null;

    return dataURI;
};

export default LetteredAvatar;
//# sourceMappingURL=index.es.js.map

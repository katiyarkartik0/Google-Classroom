{"ast":null,"code":"import React from 'react';\nvar Colors = {\n  default_color: '#8D38C9',\n  alphabets: ['#357EC7', // A\n  '#C11B17', // B\n  '#008080', // C\n  '#728C00', // D\n  '#0020C2', // E\n  '#347C17', // F\n  '#D4A017', // G\n  '#7D0552', // H\n  '#9F000F', // I\n  '#E42217', // J\n  '#F52887', // K\n  '#571B7E', // L\n  '#1F45FC', // M\n  '#C35817', // N\n  '#F87217', // O\n  '#41A317', // P\n  '#4C4646', // Q\n  '#4CC417', // R\n  '#C12869', // S\n  '#15317E', // T\n  '#AF7817', // U\n  '#F75D59', // V\n  '#FF0000', // W\n  '#000000', // X\n  '#E9AB17', // Y\n  '#8D38C9' // Z\n  ],\n  numbers: ['#FF0000', // 0\n  '#8D38C9', // 1\n  '#000000', // 2\n  '#008080', // 3\n  '#0020C2', // 4\n  '#41A317', // 5\n  '#7D0552', // 6\n  '#C35817', // 7\n  '#F75D59', // 8\n  '#571B7E' // 9\n  ]\n};\nvar Utils = {\n  getColor: function getColor(letter) {\n    if (letter) {\n      var charCode = letter.charCodeAt(0);\n      var isNumber = charCode >= 48 && charCode <= 57;\n      var isAlphabet = charCode >= 65 && charCode <= 90;\n\n      if (isNumber || isAlphabet) {\n        var charIndex = letter.charCodeAt(0) - (isAlphabet ? 65 : 48);\n        var colorIndex = charIndex % (isAlphabet ? Colors.alphabets.length : Colors.numbers.length);\n        return isAlphabet ? Colors.alphabets[colorIndex] : Colors.numbers[colorIndex];\n      }\n    }\n\n    return Colors.default_color;\n  },\n  getNameInitials: function getNameInitials() {\n    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var twoLetters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var splittedName = name.toString().toUpperCase().split(' ');\n    return twoLetters ? splittedName.length > 1 ? splittedName[0].charAt(0) + splittedName[1].charAt(0) : splittedName[0].charAt(0) : splittedName[0].charAt(0);\n  }\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar LetteredAvatar = function LetteredAvatar(props) {\n  return React.createElement(React.Fragment, null, getAvatarHTML(props));\n};\n\nvar getAvatarHTML = function getAvatarHTML(props) {\n  var _props$options = props.options,\n      options = _props$options === undefined ? {} : _props$options;\n\n  if (options.href) {\n    return React.createElement('a', {\n      href: options.href,\n      target: options.target ? options.target : '_self'\n    }, ' ', getImage(props));\n  }\n\n  return getImage(props);\n};\n\nvar getImage = function getImage(props) {\n  var _props$name = props.name,\n      name = _props$name === undefined ? '' : _props$name,\n      _props$imgSrc = props.imgSrc,\n      imgSrc = _props$imgSrc === undefined ? '' : _props$imgSrc,\n      _props$options2 = props.options,\n      options = _props$options2 === undefined ? {} : _props$options2;\n  var _options$imgClass = options.imgClass,\n      imgClass = _options$imgClass === undefined ? null : _options$imgClass,\n      _options$shape = options.shape,\n      shape = _options$shape === undefined ? 'round' : _options$shape,\n      _options$size = options.size,\n      size = _options$size === undefined ? 60 : _options$size,\n      _options$tooltip = options.tooltip,\n      tooltip = _options$tooltip === undefined ? true : _options$tooltip,\n      _options$tooltipTitle = options.tooltipTitle,\n      tooltipTitle = _options$tooltipTitle === undefined ? name : _options$tooltipTitle,\n      _options$imgWidth = options.imgWidth,\n      imgWidth = _options$imgWidth === undefined ? size : _options$imgWidth,\n      _options$imgHeight = options.imgHeight,\n      imgHeight = _options$imgHeight === undefined ? size : _options$imgHeight;\n  return React.createElement('img', _extends({}, imgSrc ? {\n    src: imgSrc\n  } : {\n    src: createAvatar(props)\n  }, imgClass ? {\n    className: imgClass\n  } : '', shape === 'round' ? {\n    style: {\n      borderRadius: '50%'\n    }\n  } : '', tooltip ? tooltipTitle ? {\n    title: tooltipTitle\n  } : {\n    title: name\n  } : '', imgSrc && imgWidth && imgHeight ? {\n    width: imgWidth,\n    height: imgHeight\n  } : '', {\n    alt: name\n  }));\n};\n\nvar createAvatar = function createAvatar(props) {\n  var name = props.name,\n      _props$options3 = props.options,\n      options = _props$options3 === undefined ? {} : _props$options3;\n  var _options$size2 = options.size,\n      size = _options$size2 === undefined ? 60 : _options$size2,\n      _options$twoLetter = options.twoLetter,\n      twoLetter = _options$twoLetter === undefined ? false : _options$twoLetter,\n      _options$bgColor = options.bgColor,\n      bgColor = _options$bgColor === undefined ? null : _options$bgColor,\n      _options$letterColor = options.letterColor,\n      letterColor = _options$letterColor === undefined ? null : _options$letterColor;\n  var initials = Utils.getNameInitials(name, twoLetter);\n  var canvas = document.createElement('canvas');\n  canvas.width = size;\n  canvas.height = size;\n  var context = canvas.getContext('2d');\n  context.fillStyle = bgColor || Utils.getColor(initials);\n  context.fillRect(0, 0, canvas.width, canvas.height);\n  context.font = Math.round(canvas.width / 2) + 'px Arial';\n  context.textAlign = 'center';\n  context.fillStyle = letterColor || '#FFF';\n  context.fillText(initials, size / 2, size / 1.5);\n  var dataURI = canvas.toDataURL();\n  canvas = null;\n  return dataURI;\n};\n\nexport default LetteredAvatar;","map":{"version":3,"sources":["../src/components/colors.js","../src/components/utils.js","../src/components/lettered_avatar.js"],"names":["charCode","letter","isNumber","isAlphabet","charIndex","colorIndex","Colors","name","twoLetters","splittedName","LetteredAvatar","getAvatarHTML","options","props","getImage","imgSrc","imgClass","shape","size","tooltip","tooltipTitle","imgWidth","imgHeight","src","createAvatar","className","style","borderRadius","title","width","height","twoLetter","bgColor","letterColor","initials","Utils","canvas","document","context","Math","dataURI"],"mappings":"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","sourcesContent":["export default {\n    default_color: '#8D38C9',\n    alphabets: [\n        '#357EC7', // A\n        '#C11B17', // B\n        '#008080', // C\n        '#728C00', // D\n        '#0020C2', // E\n        '#347C17', // F\n        '#D4A017', // G\n        '#7D0552', // H\n        '#9F000F', // I\n        '#E42217', // J\n        '#F52887', // K\n        '#571B7E', // L\n        '#1F45FC', // M\n        '#C35817', // N\n        '#F87217', // O\n        '#41A317', // P\n        '#4C4646', // Q\n        '#4CC417', // R\n        '#C12869', // S\n        '#15317E', // T\n        '#AF7817', // U\n        '#F75D59', // V\n        '#FF0000', // W\n        '#000000', // X\n        '#E9AB17', // Y\n        '#8D38C9' // Z\n    ],\n    numbers: [\n        '#FF0000', // 0\n        '#8D38C9', // 1\n        '#000000', // 2\n        '#008080', // 3\n        '#0020C2', // 4\n        '#41A317', // 5\n        '#7D0552', // 6\n        '#C35817', // 7\n        '#F75D59', // 8\n        '#571B7E' // 9\n    ]\n}\n","import Colors from './colors'\n\nexport default {\n    getColor: (letter) => {\n        if (letter)\n        {\n            let charCode = letter.charCodeAt(0);\n            let isNumber = charCode >= 48 && charCode <= 57\n            let isAlphabet = charCode >= 65 && charCode <= 90\n            if(isNumber || isAlphabet)\n            {\n                let charIndex = letter.charCodeAt(0) - (isAlphabet ? 65 : 48)\n                let colorIndex = charIndex % (isAlphabet ? Colors.alphabets.length : Colors.numbers.length)\n                return isAlphabet ? Colors.alphabets[colorIndex] : Colors.numbers[colorIndex]\n            }\n        }\n        return Colors.default_color\n    },\n    getNameInitials: (name = '', twoLetters = false) => {\n        let splittedName = name.toString().toUpperCase().split(' ')\n        return twoLetters ? splittedName.length>1 ? splittedName[0].charAt(0) + splittedName[1].charAt(0) : splittedName[0].charAt(0) : splittedName[0].charAt(0)\n\n    }\n\n}\n","import React from 'react'\nimport Utils from './utils'\n\nconst LetteredAvatar = (props) => {\n    return (\n        <React.Fragment>\n            {getAvatarHTML(props)}\n        </React.Fragment>\n    )\n}\n\nconst getAvatarHTML = (props) => {\n    let {options = {}} = props\n    if (options.href)\n    {\n        return <a href={options.href} target={options.target ? options.target : '_self'}> {getImage(props)}</a>\n    }\n    return getImage(props)\n}\n\nconst getImage = (props) => {\n    let {name = '', imgSrc = '', options = {}} = props\n    let {imgClass = null, shape = 'round', size = 60, tooltip = true, tooltipTitle = name, imgWidth = size, imgHeight = size} = options\n    return (\n        <img\n        {...imgSrc ? {src: imgSrc} : {src: createAvatar(props)}}\n        {...imgClass ? {className: imgClass} : ''}\n        {...shape === 'round' ? {style:{borderRadius: '50%' }} : ''}\n        {...tooltip ? tooltipTitle ? {title: tooltipTitle } : {title: name } : ''}\n        {...imgSrc && imgWidth && imgHeight ? {width: imgWidth, height: imgHeight} : ''}\n        alt={name}\n        />\n    )\n\n}\n\nconst createAvatar = (props) => {\n    let {name, options = {}} = props\n    let {size = 60, twoLetter = false, bgColor = null, letterColor = null} = options\n\n    let initials = Utils.getNameInitials(name, twoLetter)\n    let canvas = document.createElement('canvas')\n    canvas.width = size\n    canvas.height = size\n    let context = canvas.getContext('2d')\n    context.fillStyle = bgColor || Utils.getColor(initials)\n    context.fillRect(0, 0, canvas.width, canvas.height)\n    context.font = Math.round(canvas.width / 2) + 'px Arial'\n    context.textAlign = 'center'\n    context.fillStyle = letterColor || '#FFF'\n    context.fillText(initials, size / 2, size / 1.5)\n\n    let dataURI = canvas.toDataURL()\n    canvas = null\n\n    return dataURI\n}\nexport default LetteredAvatar\n"]},"metadata":{},"sourceType":"module"}